{"version":3,"sources":["components/header/index.js","components/footer/index.js","components/form/index.js","components/results/index.js","app.js","index.js"],"names":["Header","id","Footer","className","Form","props","useState","method","setMethod","body","setBody","handleMethodClick","e","target","toUpperCase","onSubmit","isLoading","preventDefault","setTimeout","checkedBody","JSON","parse","err","console","log","formData","url","value","handleApiCall","name","type","onClick","htmlFor","rows","cols","onChange","Results","loading","data","src","theme","performGET","requestParams","setData","a","axios","get","res","response","statusText","App","setRequestParams","callApi","message","Fragment","Main","React","Component","rootElement","document","getElementById","ReactDOM","render"],"mappings":"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","file":"static/js/main.f61b9cae.chunk.js","sourcesContent":["import './header.scss';\n\nconst Header = () => {\n  return (\n    <header id=\"header\">\n      <h1>RESTy</h1>\n    </header>\n  );\n}\n\nexport default Header;\n","import './footer.scss';\n\nconst Footer = () =>  {\n  return <footer className=\"footer\">&copy; 2021</footer>; \n}\n\nexport default Footer;\n","import { useState } from 'react';\n\nimport './form.scss';\n\nconst Form = (props) => {\n  const [method, setMethod] = useState('');\n  const [body, setBody] = useState(null);\n\n  const handleSubmit = e => {\n    props.isLoading(true);\n    e.preventDefault();\n\n    //mocking load time for the purpose of showing loading feedback\n    setTimeout(() => {\n      let checkedBody = {}\n\n      try {\n        checkedBody = JSON.parse(body);\n      } catch(err) {\n        console.log(\"Invalid JSON entered into the form by user\")\n      }\n      \n      const formData = {\n        method: method || 'GET',\n        url: e.target.url.value,\n        body: checkedBody,\n      };\n      props.handleApiCall(formData);  \n      props.isLoading(false);\n    }, 500);\n  }\n\n  const handleMethodClick = (e) => {\n    setMethod(e.target.id.toUpperCase());\n  }\n\n  const handleBodyChange = (e) => {\n    e.preventDefault();\n    setBody(e.target.value)\n  }\n\n  return (\n    <>\n      <form onSubmit={handleSubmit}>\n        <label>\n          <span>&nbsp;URL:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>\n          <input id=\"url-input\" name='url' type='text' />     \n          <button type=\"submit\">GO!</button>\n        </label>\n        <label className=\"methods\">\n          <span onClick={handleMethodClick} className={method === \"GET\" ? \"clicked\" : ''} id=\"get\">GET</span>\n          <span onClick={handleMethodClick} className={method === \"POST\" ? \"clicked\" : ''} id=\"post\">POST</span>\n          <span onClick={handleMethodClick} className={method === \"PUT\" ? \"clicked\" : ''} id=\"put\">PUT</span>\n          <span onClick={handleMethodClick} className={method === \"DELETE\" ? \"clicked\" : ''} id=\"delete\">DELETE</span>\n        </label>\n        {(method === 'POST' || method === 'PUT') && (\n          <>\n            <label htmlFor=\"body-text-area\">Enter a correctly formatted JSON object to use as the request body</label>\n            <textarea  rows=\"4\" cols=\"50\" onChange={handleBodyChange} name=\"body\" id=\"body-text-area\"></textarea>\n          </>\n        )}\n      </form>\n    </>\n  );\n}\n\nexport default Form;\n","import './results.scss';\nimport ReactJson from 'react-json-view';\n\nconst Results = (props) => {\n  return (\n    <section id=\"results-container\" data-testid=\"data\"> \n      {props.loading ? <h1>LOADING...</h1> : (\n        <pre> \n          <span className=\"result-txt\">Results:</span>\n\n          {props.data && (\n            <ReactJson src={props.data} theme=\"summerfruit:inverted\" />\n          )}\n          <br />\n          \n        </pre>\n      )}\n    </section>\n  );\n}\n\nexport default Results;\n","import React from 'react';\n\nimport './app.scss';\n\nimport { useState } from 'react';\nimport Header from './components/header';\nimport Footer from './components/footer';\nimport Form from './components/form';\nimport Results from './components/results';\nimport axios from 'axios';\n\nconst App = () => {\n  const [data, setData] = useState(null);\n  const [loading, isLoading] = useState(false);\n  const [requestParams, setRequestParams] = useState({});\n  let res;\n\n  const callApi = async (requestParams) => {\n    console.log(requestParams);\n\n    switch(requestParams.method) {\n      case 'GET':\n        res = await performGET(requestParams, setData);\n        setData(res);\n        break;\n      case 'POST':\n        //res = await performPOST(requestParams);\n        res = { message: \"This method not supported yet.\" };\n        setData(res, setData);\n        break;\n      case 'PUT':\n        //res = await performPUT(requestParams);\n        res = { message: \"This method not supported yet.\" };\n        setData(res, setData);\n        break;\n      case 'DELETE':\n        //res = await performDELETE(requestParams);\n        res = { message: \"This method not supported yet.\" };\n        setData(res, setData);\n        break;\n      default:\n        console.log(\"Invalid method choice given\");\n        setData('Invalid method choice given');\n    }\n\n    const data = res;\n    setData(data);\n    setRequestParams(requestParams);\n  }\n\n  return (\n    <React.Fragment>     \n      <Header />\n      \n      <div id=\"main-container\">\n        <Form handleApiCall={callApi} isLoading={isLoading} />\n        <div>Request Method: {requestParams.method}</div>\n        <div>URL: {requestParams.url}</div>\n        <Results data={data} loading={loading} />\n      </div>  \n      \n      <Footer />\n    </React.Fragment>\n  );\n}\n\nconst performGET = async (requestParams, setData) => {\n  try {\n    let res = await axios.get(requestParams.url);\n    console.log(res.data);\n    return res;\n  } catch(err) {\n    if(err.response) {\n      return { \"Error\": err.response.statusText };\n    }\n    return { \"Error\": \"Unable to process a request with those values.\" }\n  }\n}\n\n// const performPOST = async (requestParams) => {\n//   let config = {\n//     headers: {\n//       'Access-Control-Allow-Origin': '*',\n//       'Content-Type': 'application/json',\n//     }\n//   }\n\n//   try {\n//     let res = await axios.post(requestParams.url, {}, config);\n//     console.log(res.data);\n//     return res.data;\n//   } catch(err) {\n//     return err.response;\n//   }\n// }\n\n// const performPUT = async (requestParams) => {\n//   let config = {\n//     headers: {\n//       'Access-Control-Allow-Origin': '*',\n//       'Content-Type': 'application/json',\n//     }\n//   }\n\n//   try {\n//     let res = await axios.put(requestParams.url, {}, config);\n//     console.log(res.data);\n//     return res.data;\n//   } catch(err) {\n//     return err.response;\n//   }\n// }\n\n// const performDELETE = async (requestParams) => {\n//   let config = {\n//     headers: {\n//       'Access-Control-Allow-Origin': '*',\n//       'Content-Type': 'application/json',\n//     }\n//   }\n\n//   try {\n//     let res = await axios.delete(requestParams.url, config);\n//     console.log(res.data);\n//     return res.data;\n//   } catch(err) {\n//     return err.response;\n//   }\n// }\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './app.js';\n\nclass Main extends React.Component {\n  render() {\n    return <App />;\n  }\n}\n\nconst rootElement = document.getElementById('root');\nReactDOM.render(<Main />, rootElement);\n"],"sourceRoot":""}